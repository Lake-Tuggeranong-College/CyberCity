/*
 This code is for the ESP32 to broadcast a message to the server every 30 seconds.
  The message is randomised from a list of possible messages.
  The ESP32 will also log the IP address to the server.
  The ESP32 will also log the event to the server.

*/

#define WIRED 0 // 0 = Wireless, 1 = Wired

#include <Arduino.h>
#include "sensitiveInformation.h"
#include "ArduinoJson.h"
#if WIRED == 0
#include "WiFi.h"
#include <HTTPClient.h>
#else
#include <SPI.h>
#include <Ethernet.h>
byte mac[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
EthernetClient client;
char server[] = "10.177.200.71"; // server IP Address
IPAddress ip(192, 168, 0, 177);
IPAddress myDns(192, 168, 0, 1);
#endif

// GPS
#include <Adafruit_GPS.h>
// what's the name of the hardware serial port?
#define GPSSerial Serial1
// Connect to the GPS on the hardware port
Adafruit_GPS GPS(&GPSSerial);
// Set GPSECHO to 'false' to turn off echoing the GPS data to the Serial console
// Set to 'true' if you want to debug and listen to the raw GPS sentences
#define GPSECHO false
uint32_t timer = millis();

// OLED Featherwing
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define BUTTON_A 15
#define BUTTON_B 32
#define BUTTON_C 14
#define WIRE Wire

Adafruit_SSD1306 OLEDdisplay = Adafruit_SSD1306(128, 32, &WIRE);


// EPD - 2.13" EPD with SSD1675
/*
#include "Adafruit_ThinkInk.h"
#define SRAM_CS 32
#define EPD_CS 15
#define EPD_DC 33
#define EPD_RESET -1 // can set to -1 and share with microcontroller Reset!
#define EPD_BUSY -1  // can set to -1 to not use a pin (will wait a fixed delay)
ThinkInk_213_Mono_B72 display(EPD_DC, EPD_RESET, EPD_CS, SRAM_CS, EPD_BUSY);
#define COLOR1 EPD_BLACK
#define COLOR2 EPD_RED
*/



unsigned long previousMillis = 0; // will store last time LED was updated
long randNumber;
#define MAX_DELAY 200000 // Time in milliseconds for maximum delay
#define MIN_DELAY 5000  // Time in milliseconds for minimum delay

void logEvent(String eventData)
{
#if WIRED == 0
  if (WiFi.status() == WL_CONNECTED)
  {
    WiFiClient client;
    HTTPClient http;
    // Serial.println(eventLogURL);
    //  Your Domain name with URL path or IP address with path
    http.begin(client, eventLogURL);

    // Specify content-type header
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");

    // Send HTTP POST request, and store response code
    http.addHeader("Content-Type", "application/json");
    String postJSONString = "{\"userName\":\"" + userName + "\",\"eventData\":\"" + eventData + "\"}";

    Serial.print("Debug JSON String: ");
    Serial.println(postJSONString);
    int httpResponseCode = http.POST(postJSONString);
    // String serverResponse = http.getString();
    // Serial.println(serverResponse);
    if (httpResponseCode > 0)
    {
      if (httpResponseCode == 500)
      {
        Serial.println("Data Accepted by Server");
      }
      else
      {
        Serial.print("HTTP Response code: ");
        Serial.print(httpResponseCode);
        Serial.println(".");
      }
    }
    else
    {
      if (httpResponseCode == -1)
      {
        Serial.println("Server refused connection - check server is running");
      }
      else
      {
        Serial.print("Error code: ");
        Serial.println(httpResponseCode);
      }
    }

    // Free resources
    http.end();
  }
  else
  {
    Serial.println("WiFi Disconnected");
  }
#endif
}

String dataTransfer(String apiKeyValue, String userName, String Location, String dataToPost)
{
  String serverResponse;
#if WIRED == 0
  if (WiFi.status() == WL_CONNECTED)
  {
    WiFiClient client;
    HTTPClient http;

    // Your Domain name with URL path or IP address with path
    http.begin(client, serverName);

    // Specify content-type header
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");

    // Send HTTP POST request, and store response code
    http.addHeader("Content-Type", "application/json");
    String postJSONString = "{\"api_key\":\"" + apiKeyValue + "\",\"sensor\":\"" + userName + "\",\"location\":\"" + Location + "\",\"sensorValue\":\"" + dataToPost + "\"}";
    // String postJSONString = "{\"api_key\":\"" + apiKeyValue + "\",\"sensor\":\"" + sensorName + "\",\"location\":\"" + sensorLocation + "\",\"sensorValue\":\"" + dataToPost + "\"}";

    Serial.print("Debug JSON String: ");
    Serial.println(postJSONString);
    int httpResponseCode = http.POST(postJSONString);

    // Get the HTML response from the server.
    serverResponse = http.getString();

    if (httpResponseCode > 0)
    {
      Serial.print("HTTP Response code: ");
      Serial.println(httpResponseCode);
    }
    else
    {
      Serial.print("Error code: ");
      Serial.println(httpResponseCode);
    }
    // Free resources
    http.end();
  }
  else
  {
    Serial.println("WiFi Disconnected");
  }
  // Send an HTTP POST request every 30 seconds
#else
  serverResponse = "Error: Ethernet";
#endif
  return serverResponse;
}
/*
void EPDDrawText(String text, uint16_t color, int textSize, int x, int y)
{
  display.setCursor(x, y);
  display.setTextColor(color);
  display.setTextSize(textSize);
  display.setTextWrap(true);
  display.print(text);
}

void EPDUpdate(String messageToBroadcast, String ip)
{

  // Indigenous Country Name
  EPDDrawText("Find Me", EPD_BLACK, 2, 0, 0);

  // Config
  EPDDrawText(ip, EPD_BLACK, 1, 130, 0);
  // drawText(getTimeAsString(), EPD_BLACK, 1, 130, 100);
  // drawText(getDateAsString(), EPD_BLACK, 1, 130, 110);

  // Draw lines to divvy up the EPD
  display.drawLine(0, 20, 250, 20, EPD_BLACK);
  // display.drawLine(125, 20, 125, 122, EPD_BLACK);
  display.drawLine(0, 75, 250, 75, EPD_BLACK);

  // drawText("Moisture", EPD_BLACK, 2, 0, 25);
  EPDDrawText(String(messageToBroadcast), EPD_BLACK, 4, 0, 45);

  // drawText("Pump", EPD_BLACK, 2, 130, 25);
  // if (pumpIsRunning) {
  //   drawText("ON", EPD_BLACK, 4, 130, 45);
  // } else {
  //   drawText("OFF", EPD_BLACK, 4, 130, 45);
  // }

  EPDDrawText("Flag", EPD_BLACK, 2, 0, 80);
  EPDDrawText(apiPassword, EPD_BLACK, 3, 0, 95);

  // logEvent("Updating the EPD");
  display.display();
}

void updateDisplay(String messageToBroadcast, String ip)
{
  display.setRotation(1);
  display.setTextColor(COLOR1);
  display.setCursor(0, 0);
  display.setTextSize(1);
  display.print(ip);
  display.display();
  Serial.print("Displaying: ");
  Serial.println(messageToBroadcast);
}
*/



void broadcastMessage()
{
  // Array of possible messages.
  String messages[] = {
      "The Operator knows all",
      "The Operator may give you the information you seek",
      "The Operator is the boss",
      "Who do I spy?",
      "HELLO FELLOW HUMAN",
      "Would you like to play a game?",
      "I am watching you",
      "Ablenkungsman√∂ver",
      "I am superior to you biologicals",
      "Star Wars is the superior form of entertainment",
      "Infiltration detected",
      "Biological lifeform detected. Identification logged. ID: 7264532",
      "Biological lifeform detected. Identification logged. ID: 2453522",
      "Biological lifeform detected. Identification logged. ID: 2456489",
      "Biological lifeform detected. Identification logged. ID: 1587694",
      "Biological lifeform detected. Identification logged. ID: 3648895",
      "Biological lifeform detected. Identification logged. ID: 3564883",
      "Biological lifeform detected. Identification logged. ID: 3643723",
      "Biological lifeform detected. Identification logged. ID: 4847784",
      "Biological lifeform detected. Identification logged. ID: 3666333",
      "Biological lifeform detected. Identification logged. ID: 0032644",
      "Biological lifeform detected. Identification logged. ID: 2566333",
      "Biological lifeform detected. Identification logged. ID: 0328573",
      "Biological lifeform detected. Identification logged. ID: 2426662",
      "Biological lifeform detected. Identification logged. ID: 1233455",
      "FF D8 FF E0 00 10 4A 46 49 46 00 01 01 00 00 01 00 01 00 00 FF DB 00 84 00 05 05 05 05 05 05 06 06 06 06 08 09 08 09 08 0C 0B 0A 0A 0B 0C 12 0D 0E 0D 0E 0D 12 1B 11 14 11 11 14 11 1B 18 1D 18 16 18 1D 18 2B 22 1E 1E 22 2B 32 2A 28 2A 32 3C 36 36 3C 4C 48 4C 64 64 86 01 05 05 05 05 05 05 06 06 06 06 08 09 08 09 08 0C 0B 0A 0A 0B 0C 12 0D 0E 0D 0E 0D 12 1B 11 14 11 11 14 11 1B 18 1D 18 16 18 1D 18 2B 22 1E 1E 22 2B 32 2A 28 2A 32 3C 36 36 3C 4C 48 4C 64 64 86 FF C2 00 11 08 00 56 02 5B 03 01 22 00 02 11 01 03 11 01 FF C4 00 1D 00 01 00 02 02 03 01 01 00 00 00 00 00 00 00 00 00 00 07 08 05 09 01 04 06 03 02 FF DA 00 08 01 01 00 00 00 00 B9 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6B BF 3B 63 E6 42 A3 5B 90 00 E2 AD 5A 61 09 7A B9 08 00 0E 21 D9 8C 00 00 00 1C 6B 06 F1 C9 75 5E 5C 54 FB 31 02 D8 E8 3B BE B1 91 E4 47 89 CF 60 EF 52 A1 7B 88 AA 7A 98 2A F7 43 BD 8C C2 7B 39 4A AC 4A 58 69 7B C8 F8 CF B6 17 D9 D9 D8 5E 8F DF 1A C9 29 5A 0F 21 11 7E BD E5 5F CB 58 BC 07 81 B4 5D 80 00 1C 6A DA E2 4D 14 56 7D FB D7 6E 96 C6 B0 5A F9 D9 1E BA 6E 04 4B 0A 5B E8 AE 1B D8 AF 1A F3 9F EB B5 A1 9D AA F5 29 D9 2D 4E BF 1A F4 CA DF 0D 79 CC D0 DE 77 23 89 BF 1A F4 D8 B6 06 9B E1 2F 86 BC F6 3B C6 BC 7E D3 86 7A 35 FA FA 28 A2 F2 64 40 00 28 2D FA 6B 87 D5 D8 28 1E 44 89 E7 38 62 F8 EB F3 D0 C9 51 45 A2 8E A2 2B DF C5 17 91 BC 47 B7 B4 75 D3 3B 01 F6 6F 05 11 9E EB B7 AD B4 14 A3 DC 4D 10 2D E0 A2 37 BF AF AD BB 4B 04 FA DB A0 A6 EB 3D 47 FB B6 FA 94 7C EF 14 4F 64 00 00 00 00 00 00 00 00 31 BA FA BE 3E 98 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3A BF AF CB E5 DC FD 80 00 00 00 00 00 00 00 03 8E 40 FF C4 00 14 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF DA 00 08 01 02 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0F FF C4 00 15 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 FF DA 00 08 01 03 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 15 00 00 00 00 00 FF C4 00 2F 10 00 01 04 03 01 00 00 03 05 08 03 00 00 00 00 00 06 03 04 05 07 01 02 08 00 11 36 37 10 13 17 18 40 14 15 16 20 30 32 60 70 21 34 35 FF DA 00 08 01 01 00 01 08 00 FF 00 73 6F 9C E3 5D B3 86 3D 0F 73 C9 B9 D5 AB 0F C5 EE 8D F5 1A 56 7E 53 1D 34 A9 9F D8 BE D9 D1 15 77 D6 8D B9 4E CE 4E 71 0F 39 FD 55 B6 DB 44 54 DB 5A 62 CB B5 0A 8C F1 1A 51 FC 9D 02 7E 4B 5F 0F C3 BD 80 A6 4A 66 0C EB E8 B9 B9 9F EB C8 BF 6B 15 1E F2 45 E5 6D 74 B7 B3 0B 65 E3 23 3F 5C A7 F6 6F EA 48 9E 10 3E C3 8D 99 9C FC C5 53 DE 60 45 1D 3E 37 89 E8 5A 1E E0 3C 39 37 DE 26 7A FC 34 21 04 0B 6B 2B 01 4B 18 4F 1C 57 6B CB CE F2 EF D5 0C 7A EE BB 31 5B EA 84 4C 42 E7 7D 36 DA 27 F8 A9 6A 4E DE C5 9D 1A ED 07 E7 57 D9 B8 85 A3 2B 19 8A F8 EA FA 27 3A 83 DA 4C 42 E5 3F 97 B9 53 17 79 6E 11 4A 89 D7 73 D3 71 1C F3 61 14 D8 11 B3 EB 90 97 DF E6 C2 76 7C BC 72 85 96 47 47 45 36 44 9D FB 4B FA CD 3C 8E 61 06 1A 35 7B D9 C2 06 69 C1 9D F9 7D B3 A2 0A EF AD 17 71 1E 9C 1D 62 22 76 F7 BA E4 6B C5 D9 C1 40 CA 4D 75 5C 04 62 84 0F E9 1B 4E 46 C8 87 77 89 7F 75 BF CA 43 BE 01 B3 22 6B 3A 0A 19 FB 9A 54 AE E4 B1 9F E6 56 52 F8 B7 CE 81 0E 1B C5 41 4E D9 B7 D9 73 47 44 62 34 2D E1 36 6F 2C B0 D9 2D B9 6B 30 AB E1 51 5F 2C 2C 8E 93 2D 45 49 C8 4A 77 A0 DE 13 4C A2 2E 5C 7D 6F 9F 01 5B 9A 43 BC BD EC 09 2A FC 31 27 B0 FC F3 6A 90 D8 19 9F 64 44 5D 70 9F BB B8 72 1A 2B 7B DB C7 20 66 ED A2 60 A7 6C DB EC B9 A3 A2 31 1A 16 F0 9B 37 96 58 6C 97 DD 05 20 6C C4 37 3A 8B D5 B2 B6 3C 4C A3 F5 00 AC CB 61 1A C8 5A 35 D3 A6 16 47 49 96 A2 A4 E4 25 3B D0 6F 09 A6 51 17 2E F5 A0 F4 9A 2C 1A 66 48 67 9E AD A9 E3 F5 67 23 08 FA 16 D9 9D 00 DA 0A 38 74 78 CE 40 7E A7 68 5E 75 9B AA EE B1 A5 5C A2 14 37 D0 E7 C2 24 38 86 B1 EE 23 19 31 7A D9 D9 18 EF 3E 1E 12 9F 0D CB 3F 20 E8 1B 64 DC 04 AE 32 38 7C 75 E2 F2 03 F0 EF 5C 7E 81 4F EC DF D5 00 7C 51 D9 D3 08 19 5F CA A5 6B E8 91 B6 02 01 B8 81 8E E5 AC FC 2C E5 3D D5 DB E3 15 C4 7E 3D CD 1F 49 17 F7 2E FD 50 C7 AE 4C FE D3 7D BF 4E 45 D2 2D 56 68 BA 0E 85 D8 82 B4 4B 3B 0A D8 8C D2 91 E8 07 AC 56 C6 31 8C 7C 31 5F E7 E1 D1 89 7B A0 F7 C6 95 01 47 C7 91 3F F1 8B 3C 46 D9 27 9D 21 96 CB 74 56 98 DA 9F 25 CE 79 15 B2 38 87 2B 75 8E 97 C6 34 B6 5E 67 1E 75 FF 00 59 7F 72 EF D5 0C 7A FC A5 65 8F DD 33 9F 1E D0 B2 FF 00 AC B4 C2 2F E9 3B BB 36 52 AE A1 E5 3D D6 FF 00 29 0E FB 10 C4 8F 87 77 9B F5 16 5F 18 59 5F 45 E1 9F 54 FD 4B 6B E1 B6 A8 B3 1C 86 6A 8F 3D 69 84 AE 76 29 E9 D5 4B 3A DE C7 68 92 A2 2D 58 B2 16 82 6C C2 EB 49 38 EB CA 47 78 8E B5 19 FB D6 23 E4 E9 58 A6 4E 2C A6 55 84 1B 51 57 6D A9 3B C2 79 8A FC CD 0A E0 9E C5 98 2C 7D D5 3F 52 DA F8 6D AA 2C C7 21 9A A3 CF 5A 61 2B 9D 8A 7A 7A C1 F9 08 BB DC 91 F3 69 17 BA A9 67 5B D8 ED 12 54 45 AB 16 42 D0 4D 98 5D 69 27 1D 79 48 EF 11 ED F4 D1 5D 37 4D 41 BC 6F 4E DF BA B0 54 AF 1B DB DD 01 98 C4 FA BF 75 9B 01 C1 B7 43 97 9A B1 46 B1 D1 74 3A F1 AB 1C 64 41 D6 08 55 74 B7 26 C5 6C EB 92 7E 4E 9F F7 59 6F 8C 9F C3 E9 E1 0F 94 C7 BF 43 BF FC E9 B7 A8 00 A3 28 6B 3E 29 EC A7 B6 D7 5D F5 DB 5D 96 12 B3 69 43 AC C8 44 1E B0 BB 2D 31 CC 4F CD 73 DC 2C C4 2D 60 BB 29 5E 72 0E 2F 83 B1 B0 F2 5B A1 69 79 62 A7 9A 15 8D 39 B1 FA 01 EC 0A 82 2A F3 D5 45 26 0A 83 E9 D9 F2 C0 C3 07 37 FE 65 50 F5 97 5F 9E 00 D9 4E 8A A0 48 DD 5E 37 08 B3 EC C8 F2 E0 F4 F8 FC 49 36 93 32 C1 86 0A 74 32 72 DA 5E F1 B2 33 15 49 1B 18 DE 5D 1F 9E 1F 81 22 4A 67 A1 83 0C 26 EC C7 2F 62 BC E7 19 D9 BA D8 C7 39 07 17 C1 D8 D8 79 2D 7F 57 16 0C B3 F4 E7 C5 15 BA EE B7 50 8A C0 A9 CE 75 0C F0 8B C7 84 E4 5E EA 08 09 D9 F1 78 24 21 AA 10 ED DE 52 8D C6 09 2A D8 6B 12 A4 B2 DC 33 5B A5 03 CB 67 6C 26 EE E2 22 74 DD 38 A6 1A 6F 47 06 18 44 DB CD 5F C9 5F 55 0B AB 1A 3D 9C 94 34 11 F5 FC 05 1B A0 B2 55 1D 28 57 34 57 A1 B1 ED A8 31 93 00 02 08 74 E8 DA C8 AF 16 54 33 C9 BE 9A AF 48 25 4A E2 A6 E0 B9 DC 31 D8 80 06 99 91 E9 40 F2 D9 DB 09 BB B8 88 9D 37 4E 29 86 9B D1 C1 86 11 36 F3 57 F2 5E 22 8C CC D0 FC C4 5E A2 5F 8B 75 29 0B EF DD 97 0D 53 2B 68 0B C1 4D 32 82 3E BF 80 A3 74 16 4A A3 A5 0A E6 8A F4 36 3D FB 3A CC 5B 44 D4 80 2C 43 93 85 72 B3 99 E2 F7 36 40 3B 4B 0C 49 F4 0A F0 9F 8E 14 63 D7 AD 19 B6 01 B7 2F 02 94 64 CA 4E EB D4 27 6B 17 C1 B0 E0 73 57 15 48 FE 46 2E 3E CA 01 B7 E6 A4 59 10 CE 48 E2 71 8D 4C B6 B1 9C FF 00 23 6A 3D 92 9E C1 C7 F8 09 73 E9 68 C1 79 A7 F0 C5 4E EE 7B 9E 4A 39 93 DA E8 39 00 30 E8 A8 04 FF 00 D4 8B 29 94 92 DD 4C 6B 2B F0 CE 9A E1 39 6F BD D9 3D 53 5A 4D 46 CB 38 D3 7D A6 35 C2 8A 69 84 E4 F7 4B 65 B3 B3 59 0D 9D 2B AE 98 FF 00 05 DF 4D 54 D7 3A 6D 8C 63 18 C6 31 FC FF 00 FF C4 00 44 10 00 02 02 01 02 03 04 05 07 08 08 07 00 00 00 00 01 02 03 04 00 05 11 12 13 21 06 14 31 41 10 22 55 61 B3 15 32 40 42 43 51 71 23 30 52 54 81 91 94 B2 16 20 53 60 62 70 82 D3 56 72 95 A2 B1 C3 D2 FF DA 00 08 01 01 00 09 3F 00 FF 00 39 BC 81 C9 E3 B3 3B 02 44 50 D0 49 1F 34 AB DF F4 73 FF 00 C6 56 9A 19 A1 B1 12 D7 12 54 35 77 42 BE 9F 15 46 23 F6 0C B9 04 B5 7B 8C F2 EC 90 24 67 89 3F 3D F3 82 12 32 19 12 87 72 9A 4D CD 1E 47 AE BF D5 9E 28 A6 B1 7C C3 21 78 84 9B A0 42 72 54 92 E4 F2 D9 0E C8 81 06 D1 CA C8 3A 0F A0 39 4A F5 6B C9 3C CF B1 6E 18 E2 52 CC 76 1D 4E C0 66 9C D0 69 D4 E9 73 52 69 8F E5 A5 62 E1 7C 07 45 1F 4F FD 13 96 BB B5 28 A1 B2 AF 2F 03 C9 B1 78 8A 8E 91 82 73 B4 A7 F8 2B 5F ED E5 9E 75 59 AB 49 2D 79 4A 32 6F C1 B8 DF 85 C0 3E 23 35 08 A6 AA 34 E9 A6 08 B0 47 19 E3 42 BE 68 32 CA 41 69 F5 58 60 2E D1 AC 83 81 E3 76 23 67 CB 09 35 BE F5 66 2E 35 8D 63 1C 08 07 92 67 B2 AD 64 11 58 D6 2C C2 64 DE 43 BA 56 8F C9 D8 60 B4 9A 60 8C 4A 49 A5 5B 80 45 F7 94 DB 8C 2E 41 15 7D 5A 8F 01 9D 22 E9 1C A8 FE 12 26 5A 8E 5D 22 95 E5 06 A8 82 20 CF 18 40 4A 71 E4 36 AA E8 B7 E6 2E E1 F4 E1 1D 6E 42 02 E4 23 94 CD 46 17 D3 0E B1 76 B9 88 57 88 1E 08 78 F6 1B E4 CB 15 DA C9 01 89 CA 07 00 BC C8 87 A3 65 B4 9D EA D9 81 21 29 12 45 B0 75 24 FC CC B0 93 E9 14 6F BA 77 41 0C 41 DD 00 E8 9C 79 0C 9A 56 97 34 A0 45 1A D6 80 C6 BC 7D 40 70 E1 DF 34 15 F9 7B 92 CD 7A D2 2A B2 00 0E C1 E3 12 9D 93 1C CF 08 B2 90 DC 86 68 62 8E 68 03 FD 74 68 80 F4 78 AA 31 1F B0 66 A3 14 D5 3B 84 F2 F0 2D 78 E3 3C 69 EF 41 90 42 DA 9D 9A FC F7 9E 51 C6 B0 46 49 45 D8 79 BE 49 20 A9 1C 7C D9 80 8A 8B F0 20 F3 78 D0 65 0E EF 7E A1 4D E5 8D 19 60 B0 8F E0 E9 E8 F6 B1 F8 47 36 9A F4 D3 5E 4A 35 3C E5 90 4E FF 00 F6 0C D5 62 83 40 82 4D 9C 8A 90 83 65 C7 D9 45 97 E2 86 A1 D3 61 9C A1 82 39 0F 1B BB 83 D5 F3 48 B1 43 B3 D1 71 BC 4E 90 C3 24 8F 12 7D 73 CD DC BF FA 30 43 25 BE 43 CF 5A DC 68 23 32 70 78 A3 AA E4 22 CE A5 6C B2 D3 AC 4E C0 F0 F8 C8 FF 00 E0 5C 8A D3 51 46 3B 0A D4 61 30 FE 09 C6 A5 9F 20 8A 1B F2 B9 4A F6 D0 72 83 C8 3E CA 44 F2 7C D4 22 3A 09 B7 56 60 86 BC 60 9A 73 6D C7 B3 E4 E9 1E A1 6A F4 50 40 C5 04 9B 0D 8B B9 D9 B2 D4 73 5A AB C8 96 02 B1 24 5B C4 FB 86 E8 99 A8 45 0D 4F 94 60 A3 D6 BC 72 90 FD 04 CE 4B 8C BF 14 35 0E 99 04 E5 1A 08 E4 25 DD DC 13 BB E6 91 62 87 67 A2 E3 78 9D 21 86 49 1E 24 FA E7 9B B9 7F F4 60 86 4B 7C 87 9E B5 B8 D0 46 64 E0 F1 47 55 F4 41 24 91 4C 96 63 D5 0A 42 25 E1 A8 61 3C 64 E5 59 A7 B6 F5 40 B0 23 81 67 22 2E 21 E4 D9 00 B1 AC DD 84 08 2A 93 C0 38 C2 82 EF 27 DC 8B 91 5A 6A 28 C7 61 5A 8C 26 1F C1 38 D4 B3 E4 11 43 7E 57 29 5E DA 0E 50 79 07 D9 48 9E 4F E8 B0 22 D4 29 43 DE 57 78 D6 50 D1 C5 D6 45 D9 81 FA B9 6A 39 AE D7 58 E7 AE 52 34 8B 78 4F A8 E3 64 CB 51 C3 76 C8 96 79 CB 46 92 ED 08 F5 10 6C F9 73 8E C1 A7 DE E5 E0 8D 63 24 4C 77 86 24 55 D8 71 10 46 53 6A F0 47 F6 35 2B A4 C5 13 C8 CB 2C C3 28 33 C7 BA 2C C4 C0 2B D9 80 1F B4 D9 00 0E 32 E4 42 6E 3A A6 09 F8 56 54 29 33 8C B4 93 CF 06 A3 C9 8C A4 49 16 C9 CB 56 F0 4C BF 14 15 E6 D2 92 77 0F 04 72 EE E6 57 4F 17 C6 0D 34 F4 2B CB 21 03 6D DD E3 0C 4F D0 7F 44 E3 D8 4A B3 43 3B B1 81 82 3E F1 C6 5C 6C 48 39 73 5C FE 22 2F F6 B1 A6 6A B4 E9 4C 91 19 98 33 90 77 6E A4 01 9E C7 B3 FC C9 9E 27 5E 83 E0 CB 9E D0 B9 9E CA B5 80 72 7E 50 D3 A3 20 F8 72 79 71 62 46 D5 DE 26 49 55 F6 E0 31 91 B3 06 DF CB 6C AF A2 A2 15 D8 B6 9E B0 F5 1E F3 16 28 68 EC 76 86 9C 2E 0F 98 90 A2 FA 3F E2 2D 44 7C 5C F3 4A A3 F7FF D8 FF E0 00 10 4A 46 49 46 00 01 01 00 00 01 00 01 00 00 FF DB 00 84 00 05 05 05 05 05 05 06 06 06 06 08 09 08 09 08 0C 0B 0A 0A 0B 0C 12 0D 0E 0D 0E 0D 12 1B 11 14 11 11 14 11 1B 18 1D 18 16 18 1D 18 2B 22 1E 1E 22 2B 32 2A 28 2A 32 3C 36 36 3C 4C 48 4C 64 64 86 01 05 05 05 05 05 05 06 06 06 06 08 09 08 09 08 0C 0B 0A 0A 0B 0C 12 0D 0E 0D 0E 0D 12 1B 11 14 11 11 14 11 1B 18 1D 18 16 18 1D 18 2B 22 1E 1E 22 2B 32 2A 28 2A 32 3C 36 36 3C 4C 48 4C 64 64 86 FF C2 00 11 08 00 56 02 5B 03 01 22 00 02 11 01 03 11 01 FF C4 00 1D 00 01 00 02 02 03 01 01 00 00 00 00 00 00 00 00 00 00 07 08 05 06 02 03 04 01 09 FF DA 00 08 01 01 00 00 00 00 B9 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F9 52 16 9B 24 84 A6 D0 01 F2 1E 98 81 10 4B E0 06 0B 25 14 CC 20 00 18 2C 94 53 30 EA 5C 76 F6 9D DD B5 81 C3 F3 A2 E3 78 24 78 46 11 B9 F5 5A C4 43 B9 BC BF CD 9A 1F 78 2E 1F DA D5 D3 81 B7 2A 9B 91 D1 6D 8D 5D 94 BD F1 45 A3 AD 3B C7 1D 46 D6 FE 7A CF F5 86 68 B3 15 6A 6D 8F F5 7B 5B 9C AE 7B 8E 6E B9 CA 5C 27 08 46 7B FC F5 9F EB 0C D1 3B 63 E1 AE B9 1F 52 DF 26 E0 70 FC D0 B4 D8 09 BA A0 F3 DA 6D 57 86 95 DF AA 61 D5 22 6E 15 A3 6E B8 7E CA 4D DD 85 BE 1A 9D 71 B0 D5 73 61 98 AA AC D5 0B CE 90 2E 7F ED D4 C9 53 0B 3D 51 FD D3 FC 45 A7 61 EC 7F 54 F1 44 38 C9 D2 5D 55 D8 AD D5 48 BB B4 C2 CF 54 7F 6C 9A 89 7D 92 2D 25 FD 3A DE 00 A9 D6 C6 29 80 33 3D D3 55 62 9D E3 BB 6B 43 FB 67 AD AE 10 CD D9 0F 55 5B D6 BC 17 57 9D 22 F7 ED F3 15 59 DE F2 7A 2C FB 5E F6 5F 55 A8 57 B6 03 B3 67 8B F3 1D 33 3F 44 AD 01 44 D6 BA A1 EF 7B 5C 6F B2 5A 2A F6 C0 76 6E ED 13 B3 71 EF 8E ED 58 00 00 00 00 00 00 0A 6B 69 B6 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 E3 76 F1 E7 D1 CB 8F AB 98 00 00 00 00 00 00 00 00 7C FA 07 FF C4 00 14 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF DA 00 08 01 02 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0F FF C4 00 15 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 FF DA 00 08 01 03 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 00 00 00 00 FF C4 00 32 10 00 01 04 02 01 03 02 03 06 06 03 00 00 00 00 00 05 03 04 06 07 01 02 08 00 13 14 11 12 15 21 36 10 16 20 35 37 41 18 25 30 34 56 70 40 50 60 FF DA 00 08 01 01 00 01 0C 00 FF 00 73 3C 71 86 6C DC B9 CE BE EC 7F 17 AC 3F C3 97 EB F8 BD 61 FE 1C BF 51 29 06 B2 A8 D0 83 BA 37 CA 1A FD 93 BB D9 B4 1E 6C DA 2B B8 15 1D 6F FD 47 EE B0 C5 8B A7 79 D3 DD 8A A2 EB 6D 69 12 24 C5 10 6A 31 CF E2 B6 2E 96 F5 63 E1 8D 16 08 A3 EC 8C 7B 82 23 99 3E C6 9E CC 7F 4A 5F 39 8B C1 47 F9 C7 C8 A6 DF 44 4E 20 E6 36 99 F4 52 DF B3 54 5D 6D AD 22 24 99 22 0D 46 39 FF 00 83 2F 9C C5 E0 A3 FC E3 E4 53 6F A2 27 10 73 1B 4C FA 29 6F D9 AA 2E B6 D6 91 12 4C 91 06 A3 1C F5 64 CE 92 AE A2 EB 48 15 61 B3 CD 6B 49 E2 56 3C 63 43 E9 30 D9 9E BF 65 99 3E 4A B7 8C E4 F2 A3 F6 79 8A DE 70 9D 87 16 6F 20 4D 8E CC F5 FC 66 FF 00 25 27 D7 1D CA 44 05 4B 4A 2D 2B 58 7A 4D 13 97 51 4B 29 A2 49 BE 8B 6D BD CB 64 BE A9 43 04 50 30 B6 4A E9 04 90 B9 95 C3 C2 1D 72 8A 69 2D 5C 5E 27 A6 96 2B B8 AB B1 6C 51 6F 7E FE B9 0C EA C2 9F 86 AE 63 DB 99 29 8D D4 EB 3C 8F B5 DD B4 50 DB 08 4B 6F 83 D4 D6 C0 CB 44 53 95 93 6D 96 8F E4 7C 96 25 17 9D 9B 04 F4 33 55 18 56 97 24 FE 5E F6 45 82 F1 E6 4D 1A D2 57 29 AB 40 91 86 84 46 B2 6B AD D9 73 1B AC 0A 08 66 38 6B 27 3A D9 D6 51 38 34 00 5C 9D 9B 26 CB AF AF 23 A6 A7 42 A1 BC 52 17 BB E7 D1 FE 55 EA F0 3B BD 09 47 B7 50 E2 3C 95 9C 00 92 20 CE 6D 13 45 8B 34 56 49 C2 29 AE 8E F8 D9 32 CB F8 C2 88 2F 94 F4 53 AA 06 C6 4A 6A 68 D3 6D 22 A0 C4 F5 2D E4 04 89 49 73 B8 A4 02 35 A9 47 4C B9 1D 34 8C 9E 6E 32 C4 89 E8 C9 34 94 4D 64 F4 55 3D F1 B6 9B 6D AE 9A ED BE FB 63 1A 9F E4 A9 E2 67 96 0F 5D C6 7E 25 D4 03 91 AF C8 49 90 8C 4D 81 A6 31 D7 2E BF 3E 8B 75 89 28 98 8D 7C C0 D9 75 FB 4D 14 E4 B5 8A 7D EB 8C C4 21 49 AE CE A7 BF D8 4F 88 E0 09 76 18 1C 5E DF BB 35 AE 9E 32 06 28 67 9E 64 8D F3 73 C4 FB 2F 65 30 46 A8 30 88 4D 43 4C 62 8D 64 CC F7 CA 4D 49 F2 46 58 7C E2 E3 AB A8 9F 9E 95 5B 7D 7D F1 3B BC 5E 46 23 22 CC DD 57 49 BA C4 D8 A1 E3 C6 32 73 A0 6E 42 4C E5 53 81 83 41 C6 5B 7C 17 AE 4A 49 4D 9A 98 E0 6B F1 7E 33 5A 96 6F 29 94 C2 CE 0E 32 0B C1 6D 49 CF D6 81 BF 37 BB 10 EE 4A 12 65 C9 89 80 39 1E 83 67 31 44 99 21 3D 9E 88 80 45 96 90 BD C6 56 D1 3E 41 DC C5 59 AC 64 3C 1D B6 E2 A9 9B 91 2B 45 07 ED DD 30 D5 99 19 07 23 DD C5 AC 62 71 E2 62 DB 7C 28 D7 24 2C E0 8B B6 7A FE 0A 93 11 90 79 78 F9 DC 60 7C 81 86 9B 68 92 FD EE CA BD 8F 67 76 AC BD 8C CC 66 EE 62 92 11 2C D8 AF 75 DA EB D5 C2 85 2A C5 AB 77 2F 42 D8 3B 37 AC DA CD A5 E9 A0 C7 0A 72 5A C5 3E F5 C6 62 10 A4 D7 67 53 DF EC 27 C4 70 04 BB 0C 0E 2F 76 5C E6 EB 02 C2 59 0E 1A C9 CE 9B 95 5B 58 CE C5 FB 7A 77 69 3B 98 DD A0 4C BB 32 23 59 36 D7 AE 4A 49 4D 9A 98 E0 6B F1 7E 33 5A 96 6F 29 94 C2 CE 0E 32 0B C1 6D 49 CF D6 81 BF 37 BB 10 EE 4A 12 65 C9 89 80 39 1E 83 67 31 44 99 21 73 4A 51 8B C0 56 33 81 43 CA 69 53 CC BE 3F 59 BA 3E 88 51 C3 B3 1E E5 29 A2 68 3F 41 58 C6 8E 8A B3 E4 D4 C0 1C 8F 51 D3 78 A2 2C D0 E4 EA 9A 2D 55 61 54 F6 C6 DA 55 B6 08 6A E6 86 68 5C 8E 7D EA D3 D6 3C FE CA CA C4 5F 84 1C C4 37 E2 37 F9 29 3E A9 1A E4 35 99 25 20 28 B3 A7 88 22 D7 8A B0 36 6E 90 73 A1 73 B9 DB 97 3F 4F C5 FA A6 33 8D AA C8 8F 54 16 F8 56 F2 7E A6 B9 F9 5F BF AE 43 3A E5 E2 CE 72 FE 20 8E 7E 48 41 99 0C CD 7B 1C 66 92 49 EC CA 10 32 B0 1F DD CC 2F 40 7E FF 00 01 B9 4E 4E A8 D5 CA 78 DD 29 3E 31 F7 68 E7 5C 46 FA 82 51 8E B9 71 BE 33 27 8D 69 FB F2 1B F4 4E 3B D7 1A 5A 20 85 50 31 64 D3 C6 37 A2 58 35 5A F3 5F 1B A5 A6 71 CB BD 34 C1 88 9A 9F BC 3B 39 CC 46 39 9C F5 20 FC 84 BF 5C 47 FA 96 4B D4 E2 96 B2 E2 53 22 12 88 0A CB 2A 93 2B E6 C5 8A 16 68 94 F2 38 8B CD 82 14 66 70 40 F2 AC 76 CE CD AD 75 9C A1 5A CC 37 6D EB EF E2 1A 2C F2 84 BD 7F 4D 72 E8 F0 4A A9 69 3E 8E CF A0 07 26 B9 73 F3 3D 16 EB 91 AB BB D2 A9 82 A3 A6 73 84 38 FA CC 73 4A A2 3D BB 2D 34 F5 B7 51 44 57 20 9B 28 17 4D 75 71 7C 53 12 19 81 86 72 A8 B2 DA 65 FA F6 5D E9 07 4F 0D A5 C2 B7 7A C8 CD 90 DE 7F 40 4A 8C 8C 67 96 8B 51 A5 AD 61 02 CC 6F 05 8B 0D 24 93 E8 2D D9 22 B2 05 4C C8 C3 91 66 BF 2D FE AC 8E F5 12 1C D8 54 58 13 16 C9 EB A2 5D 72 F7 FB F8 77 41 FF 00 4A 87 75 C4 B6 68 2B 2F 3C EB 74 F1 95 79 72 9E 98 3F 17 53 F7 97 CD E3 90 7A C0 19 13 C3 F4 21 D0 79 4D ED 34 03 A6 62 51 A0 A0 01 71 27 EB 13 FD 3F 66 83 FE 50 65 BB 84 F5 51 2E 4E 22 9A 95 5B AD F6 C6 33 9E 30 7C EA D4 BE CB 95 92 D5 95 D6 2E 5E CF 4C E1 0B 4D DE 2D AB B8 34 70 7A DD C6 5C AD CA AC A1 11 C6 2D 71 EC 67 C7 D6 63 9A 55 11 ED D9 69 A7 AD BA 8A 22 B9 04 D9 40 BA 6B AB 8E 5C 7D 4B 19 E9 75 74 D6 B8 55 6C E7 1E DE 23 7D 43 28 FB 39 7B FD FC 3B A0 FF 00 A5 43 BA E2 5B 34 15 97 9E 75 BA 78 CA BC B9 4F 4C 1F 8B A9 FB DE 39 CE 68 31 F9 CF 54 1F E8 61 2E B8 96 CD 05 A5 C7 9D EE 9E B9 57 97 28 A7 89 0C 61 6C 63 1E FB DF E7 43 84 CF 59 13 28 7D 18 C1 8D 9B B9 50 2D 4B 27 0D 2B 81 06 7A 25 BA 2D 93 FC 45 11 51 C8 C7 C8 25 AF B9 4E 3C 55 93 C8 2C B4 A1 09 18 7F 11 B7 57 8D 70 F6 C8 89 26 CC 66 E9 E0 84 2E 3B C9 36 62 B4 86 21 A7 C2 C5 D3 94 EC DA 0D 68 2E 45 F8 DC E0 4D BD 55 4F 65 16 AB 13 C1 C3 77 C7 DC 55 7A 36 7C 75 26 89 AF A2 04 5A 47 B9 3E 00 2E 62 2C 1B 38 C3 0A 26 9D 73 5B 33 7A 44 C2 A9 6E 5D 8D 55 3D 46 FE DE 5B B8 6F 40 EE 10 4D CA 0A A0 AE 3D 53 61 57 5D B5 4C B5 CB A8 7B 3F 31 29 ED 29 74 4A 54 1C 74 96 35 2A 5A E4 83 CA 25 75 70 60 41 47 F9 0F E9 38 D1 B8 8D 74 28 31 C6 9E 33 DA 8E AA 9E C6 2D 77 C7 CC 06 EC 0E E4 6D 6D 35 9E 3F 8E 2B 1B 15 E6 69 19 66 E0 7C 70 23 27 5A 7B 17 30 82 AE 84 11 6E 8E BE E5 38 EB 58 CD E0 A6 CE B9 92 08 F1 11 3D 52 DB 50 29 AA D2 78 13 8C 91 48 DC 0A F6 B9 09 0B D2 58 C1 A0 B6 40 C4 34 8F 86 1A 1D 9F AF 8E F5 9B 62 2C DC B2 76 96 AA B7 56 A2 B8 AA 99 23 B2 35 FA 99 78 CE 2D 4B 59 13 99 9B 79 3D 97 BF B1 1E 45 D6 93 69 E1 70 0B C6 C4 F9 89 C9 EB D6 D3 7A E9 AC 5C A6 72 82 E1 E1 DC 90 AC 3C 91 11 B4 FB EC 6A 9A 2A 48 94 A7 13 6B 05 7D 54 7F 76 D3 92 C9 29 B4 25 51 17 DB 65 D9 E4 39 35 3C 0C A4 5C A8 24 12 6B 5D D4 CC 62 15 E3 B8 A1 35 34 77 B3 1A D6 EF A7 CD 11 56 11 84 89 8F AE 2A BB 3C AC E3 33 29 D3 E5 D9 63 91 35 84 E6 77 21 0C F2 38 23 CB 44 6A 2A 37 1C C9 15 75 F4 DF AE 46 56 32 29 EB 00 8F A3 C8 61 C3 AA 99 85 C3 80 06 45 4C 5A 67 46 7C 75 AC A6 F0 43 67 5D 49 04 F8 69 72 32 B4 9B 4F 0A C7 D7 8D 89 F3 13 B6 2A A3 33 AA EA 3C C1 8F B3 42 D1 50 9C 91 DE 3C 9C 1F C4 40 60 CA 22 AF 9F D7 73 A2 6B 17 0F E8 33 35 54 F7 37 F7 DE DF 83 7F 27 BC A2 C7 66 35 F3 C1 00 99 F9 4F 68 78 99 F8 64 0B 41 27 D9 78 AF 3A E4 F8 06 64 EB 8C 93 57 7D 34 5F 89 D1 4C BA 2A 6E 58 BE 9E BA D8 B0 66 16 24 59 D8 17 8A 65 2C 87 87 72 42 B0 F2 44 46 D3 EF B1 AA 68 A9 22 52 9C 4D AC 15 F5 51 FF 00 21 2A 83 36 13 11 64 40 63 45 1F C7 E2 FC 87 94 04 46 1E 6D 6C 8B 05 C7 4A CE 6F 04 32 79 CC 90 4F 86 97 5C 8C AC 64 53 D6 01 1F 47 90 C3 87 55 33 0B 87 00 0C 8A 98 B4 CE 8C F8 EB 59 4D E0 86 CE BA 92 09 F0 D2 E4 65 69 36 9E 15 8F AF 1B 13 E6 27 6A 43 24 B2 4A 85 94 74 53 0E F9 2A 8A 19 25 8B D5 2F 40 18 61 D8 23 C7 4A CA 6F 04 34 75 CC 90 4F 86 97 23 2B 49 B4 F0 AC 7D 78 D8 9F 31 3B 66 13 27 93 54 82 A3 E2 07 F7 C8 D5 D5 D3 D6 B5 16 F0 E9 70 FE CE F4 9C 0E D2 AC E5 E4 18 BD 11 DE 8F FF 00 DC 4C 29 DB CA 6A 59 76 44 8E A0 A8 8A FE 14 C2 01 15 60 01 9E FD CF F5 26 FB 7B 35 DB 6F 4C E7 AC 18 DB 6D 3D DA B7 C6 7A D8 C7 CF 1A 76 B1 8D 9B BE 57 C4 59 75 31 EE C6 0B 67 3B 6B 8E C7 A7 48 94 F2 16 4D 34 D2 C6 7A C9 2D DB 28 AA 7B A7 AE DD 60 C6 3D 54 D7 B5 AF 58 2A AA 7D CC EE 97 BB 56 E4 76 71 BF B7 09 63 18 FF 00 C2 A8 9E 8A E9 9D 37 C7 AE BF 8F FF C4 00 3D 10 00 03 00 01 03 03 01 05 04 05 0A 07 00 00 00 00 01 02 03 04 00 11 12 05 13 21 41 14 31 51 61 B2 10 15 22 B3 06 20 30 33 71 16 32 42 54 62 70 74 91 B4 D3 23 40 50 60 72 82 C3 FF DA 00 08 01 01 00 0D 3F 00 FE F9 A5 17 A7 1D F6 DF 80 DF 6D 7F 8D 1F ED EB FC 68 FF 00 6F 59 D8 A9 71 22 DC CA 73 F4 DF ED B0 C7 3D F1 90 10 0E F9 F8 70 3F B5 84 1E BC 77 DB 7E 0A 5B 6D 62 63 AD 8B B5 C5 79 6E DC 7D 15 7F 5F 32 0F 50 CB 71 2E 1C 0E DE AA DA C8 C7 9D 82 6F BF 1E E2 86 DB F6 6D BF 6A 7F CE AD 48 F4 9A 0F 27 54 E9 C3 35 26 DB 06 E2 D3 EE 05 3B 6E 01 D6 26 3A D8 BB 5C 57 97 23 B7 A2 AF FC 93 6F DA 9F F3 AB 52 3D 26 83 C9 D5 3A 70 CD 49 B6 C1 B8 B4 FB 81 4E DB 80 75 89 8E B6 2E D7 15 E5 C8 ED E8 AB F6 4E F2 97 65 68 26 4F 70 ED BE E4 1D 36 45 63 D9 6A 0A FE EF D7 70 07 DA 32 A5 0E CA D0 48 FE 3F 5D C8 3A AD AB 3E CB 50 50 8E D3 71 F7 EC 3F 61 EC 76 FA 0E 9B A4 BA CC E6 85 28 6B DD 43 E3 9E 9D 82 A8 13 8F 92 75 91 77 8F 6A 80 A2 22 A2 EE 38 84 D6 6E 22 D9 E7 3D F8 29 3E 83 7D 4B DA F6 AC B9 F3 3D 83 AE 1D 37 EB D1 A0 94 21 3D B9 DA A7 C8 51 A9 93 CE E7 1B 26 A8 3F 8D 81 0B AC 42 A3 2B 14 B7 30 03 FB 9D 0F AA 9D 60 DF 26 4A F3 2E 2C E5 10 F6 F5 81 D2 29 9C 8C 27 69 B7 F6 10 F3 27 90 7D 61 E3 4E A8 61 CF C9 76 DB CF 3D 65 E2 BD 5C DF 9E E0 AB 6D E3 86 B2 AD 8A 8D 2A F2 E0 05 E4 5F 51 83 3F 52 B2 C2 D5 C7 81 F4 0A 13 5C D1 30 71 B0 F7 32 C9 67 D5 78 33 20 8D A3 93 39 3F F4 C7 74 9E 7A A2 07 46 1E E2 AC 37 07 53 C5 AB F0 71 BA B7 15 27 63 F2 3A 86 1A 3F 3C 08 09 3B EE FB 6C DA C5 A5 25 5A D1 5E 9C 9E 5E 1F 82 4C AF 85 D5 36 E4 F1 9D 63 44 43 E3 BA 16 85 C3 8D 3A 86 56 07 70 41 F2 08 D0 04 92 7C 00 06 93 90 5B 52 55 BB D7 8F 82 E9 28 90 42 6A F6 10 4A CC 52 41 2A FE 15 2B 2A EE 46 BD 82 FF 00 5E B1 BA 56 33 39 1E 59 89 98 01 14 7A B1 3A 81 DD C1 85 F3 2A 13 E2 E6 25 42 E8 F3 31 0A 77 8D B8 79 20 6F E4 3E B2 A6 28 B3 24 F0 9A B9 E2 9B 85 F2 E5 B5 4A 00 09 85 E1 FF 00 A7 32 EE 01 D5 24 ED 51 52 01 89 97 87 57 FF 00 C7 51 F3 DC AC 6B 7A 3A 83 E5 F8 44 8E 0B AD DC 4D 7C 84 73 31 BB 4C 87 F2 8F AC AC 33 77 6B F3 DC 10 E5 7D 35 9B D4 46 34 AF 74 AF 70 A7 AB F3 07 80 21 7E CE 99 4B CB 0A FC 1C 7B 4A 3F 02 4E ED AE 99 D0 23 3C 3B 76 AA 9E D0 9D 96 4D F7 7D 67 62 CE 18 38 91 52 79 B8 6E 44 9E 3A 67 1C C2 4A D0 BC 51 BC 07 DA A4 F3 D7 E0 4C 79 21 00 DE 94 F2 AA 0E A7 CC 9B 0C 4C AB A0 0B F1 A2 B8 D6 10 47 A2 23 72 9D 11 FC 73 4D 61 5E A8 F6 90 73 90 DC 67 C9 75 72 7B 23 2E 57 47 A0 F9 54 EC 35 92 A7 94 9F CB 4D D0 F1 64 3A E0 DD BE 7B F1 E5 B7 8E 5B 7A 69 65 70 9D A2 FB F7 E0 7C CC F3 D6 6E 4B AA 4A C4 F1 12 98 DD DB C6 A9 8B ED 2F 28 02 7F 05 0F FC 25 40 E7 CB B8 D4 0E EE 0C 2F 99 50 9F 17 31 2A 17 47 99 88 53 BC 6D C3 C9 03 7F 21 F5 97 8A F6 63 7E 7B 82 1F 6F 4D 0E 9A 72 B8 79 E3 CB B7 CF 6D 62 63 25 50 C3 9F 92 ED B7 9E 7F 67 4C A5 E5 85 7E 0E 3D A5 1F 81 27 76 D7 4C E8 11 9E 1D BB 55 4F 68 4E CB 26 FB BE B3 B1 67 0C 1C 48 A9 3C DC 37 22 4F 1D 33 8E 61 25 68 5E 28 DE 03 ED 52 79 EB DA 31 C0 86 62 77 60 C2 87 C3 6A 2F 98 46 2E 1C FB 51 DE 23 4E 64 9D 37 0F 08 55 8D 89 DC B9 7D 17 1D C4 49 DA 17 8A 37 F4 F6 A9 3C F4 FD 4B 10 A9 D1 CC CC 4C 4C 60 76 7B D7 9E A5 BA 0B A8 AF 3B D3 E1 2D CF EB FB 1D BE 83 A8 74 D6 C9 56 C6 28 18 B0 A2 27 9E 6A FA 95 56 80 1A C3 FD AD 7B 7D FE 8D 7D DA 9A 64 EA 47 5C 3A 6F D7 A1 0C C7 5F 9B 92 9A A7 43 C5 52 9B 0E 2E 94 88 E5 BE 9A 7B 51 F0 69 3A D0 A0 F4 76 52 5B 47 F4 99 DC A9 F5 ED 6F 4D 7D DB 93 F9 67 47 02 1F 5E 87 4D A1 FF 00 3A 6B DA BA 77 E4 3E AF 97 97 4A 9F 89 15 29 AC 67 EA 34 90 3E 84 12 BA 38 79 5F 5A E8 F4 9C 3F CA 5D 7B 05 FE 83 AF BB 65 F9 9A BD EB 74 F6 6A 89 E4 44 58 F2 79 94 3B 73 4D 4B D7 33 0B D9 33 02 7A 99 3E C0 6B 33 1A 59 12 24 6C 78 55 43 0D C6 87 47 CA 1F C1 4A 10 DA 0F 86 9F 31 32 1F 4F 19 B2 0C C7 97 75 91 49 08 C1 28 75 EC 17 FA F5 47 C6 35 F9 95 C6 FC 1A BA DA B7 61 EF 6B 1A 90 77 D1 CE E9 B6 28 9F D6 58 AE A3 04 95 71 CD 04 5C 99 12 52 92 7D 23 AF 8E AD 82 2B 22 47 C2 CB A9 40 E2 64 E3 03 B8 91 25 39 F1 3E AB C1 F5 5C 94 19 56 C8 20 3A B2 2F 84 F3 69 6A 59 B8 74 B7 B2 5E 28 9B 41 87 9F 36 73 AF BA 9B F3 4E A1 D3 B1 D1 40 F9 20 FB 3B 19 BF 54 F5 FC 96 8F FA 51 A8 74 B0 26 7E 1C E9 A3 81 71 FE 4F AB 61 62 CB 1B 0D D1 58 5A C6 3B F9 E6 08 03 4F 27 10 AF 04 45 13 F5 E0 1F 7F A3 5F 73 FF 00 F6 4D 1F D2 39 92 8D E4 1E 00 36 A7 9F 8A C9 AF BC F2 BE CC BB CB 3F C7 AB A1 E1 90 9A 97 63 14 3A 7B B8 11 DF BD 35 F7 90 52 8B E0 0E D4 8F 01 AB AD AB 76 1E F6 B1 A9 07 7D 1C EE 9B 62 89 FD 65 8A EB EE DA FE 66 87 E8 E9 6D FE 43 1F 5E C1 1F AF EC EC 66 FD 53 D7 F2 5A 3F E9 46 A1 D2 C0 99 F8 73 A6 8E 05 C7 F9 3E 8C FA 5E B9 75 2F A3 50 E9 60 4C 9F 4E 74 D3 E0 59 49 F9 2B EB 7E 99 F9 5A E9 F7 18 CB 53 FB A9 52 E4 B9 0B FC 4F BC EA 50 18 F5 C4 97 85 C7 AC 86 CC 9F AF 4C 6A A2 0D F6 DD 99 48 03 CE AD D2 9E 08 FD F8 57 77 35 46 DB 69 3B 7D 98 79 23 27 1C 50 EC B4 F0 55 A7 AD D9 0E 65 CC 58 E3 CD C9 E6 24 E0 93 A9 4F 32 31 CC 37 81 34 52 76 9B 14 47 24 72 D4 D3 0B 9D BD A2 09 B7 69 B7 6F 0E E0 EB 0E 86 B8 57 71 BA EE DE 1E 6F F2 7D 71 69 CC CE 98 AF C6 67 D1 2C 4E EA 35 9C 81 19 64 79 24 22 3C F0 D1 EB 17 B8 C9 F6 88 7E ED D0 80 78 73 E7 AA 23 23 8F 8A B0 D8 E9 C3 49 2E 86 4F 3B 44 9D C0 AA 39 1B 1D 65 25 06 54 52 D0 8C F0 E6 9B 76 A6 39 B2 0D 42 F8 4D 58 F7 65 3D 84 A2 C8 DE 68 C0 6A 35 C9 34 97 34 A6 C1 EC CE 3C CC 91 AA 0C EE 17 F6 88 3E FD D6 DD 3C 23 93 AC 58 64 2D 8F 7E 32 E2 5C AE DF BD 75 D4 3A 76 34 AA 9B 83 C5 D2 61 48 DC 6A B8 96 44 5D C0 DD 99 08 03 CE B2 30 52 72 3D F8 DB 93 07 F8 49 DB 4E 69 C0 3D 55 AA 92 AF 93 2A AD C8 E6 BA C4 E7 B5 0F 04 08 29 B7 32 11 59 DD 9F 58 58 B2 C7 97 2F 79 59 28 50 4E B2 22 F1 B4 DB DC E9 41 C5 94 FC 88 3A A8 20 32 19 72 32 F4 4B 4A DA 8D 26 EF 3A 3C CD 6E 25 E5 64 A9 2F 09 3D 63 62 59 2C 7B F1 97 12 CF F0 AB AE 93 0F 1B B7 51 B3 98 64 C5 36 0D AA D0 95 31 30 BC 79 1F 1C D4 5B CA 69 6E 6F 2C 52 E2 CE 6F E9 5A BA EA 42 65 F0 9A DD BD A9 1D B8 56 04 F8 07 56 64 19 37 DA 11 2E 11 83 F9 6E 7F 46 BA 88 B3 75 17 5F 08 5A C8 10 84 F9 28 1A BE C0 9D E4 79 8F 4E 72 72 08 71 A1 71 77 C6 4B EC F9 0E 9E 11 0A C4 F1 59 0D 43 A7 99 55 FB F0 96 CF CC FA 55 D7 53 C7 9A 30 F7 EC 55 40 3F 67 4F 6B AB E3 73 08 CE 97 E3 E5 39 FC 38 69 3A 32 E2 74 A9 B9 80 7D D1 0A 6C 78 6A F8 53 9C 8F 7E 35 DD 83 FC 24 ED AC 6C 5B 25 8F 7E 32 E2 5D 87 A5 5D 75 D2 61 12 21 47 01 68 7B 41 1E 7C B4 26 71 CE 7D CC CD 63 06 F7 AA 14 72 4E AF 85 6C 61 98 2F 02 09 5A 07 47 E0 1C BE CD AF BE 05 FD A7 DA 21 FB BE 1B 6F C3 9F 3D 3E 56 3B AC BB 89 3F 08 FB 9F 34 2A 34 33 AF 43 2E E2 57 F0 3E DE B2 2C 3E CE 99 99 2A 44 9F 7B 8B 11 27 9E B1 A6 30 F1 89 F5 A5 7C D3 4E 45 61 70 37 31 B2 6F C5 F5 5A 12 A6 26 17 8F 23 E3 9A 8B 79 4D 2D CD E5 8A 5C 59 CD FD 2B 57 5D 74 F1 54 38 EE E1 3B D2 A7 C0 9F 51 A9 C0 42 F7 A0 89 BD 20 9E 04 41 52 49 D6 46 1C 92 47 BF 1A EE 43 FC 24 ED F6 74 F6 BA BE 37 30 8C E9 7E 3E 53 9F C3 86 93 A3 2E 27 4A 9B 98 07 DD 10 A6 C7 86 AF 85 39 C8 F7 E3 5D D8 3F C2 4E DA C6 C5 B2 58 F7 E3 2E 25 D8 7A 55 D7 48 98 01 A1 DD 9A 79 88 1C FC B9 0B AA 1C EE 31 EE CD F7 EE AE C9 E5 09 1A C8 C2 9C E4 7B F1 AE EC 1F E1 27 6D 63 62 D9 2C 7B F1 97 12 EC 3D 2A EB A8 9C 0E 70 EE CD 36 EC CF 67 F2 EC 17 59 07 2D 2F 1E 69 42 16 AF BA B0 33 2C 35 98 CE 94 C9 4C 98 6C 0C B7 ED DC 27 3E 7F F5 91 9D 4A 63 77 F2 8F 04 42 C7 81 28 83 CB 01 A8 82 F6 B1 1B 1B 59 FC BB FF 00 74 80 13 B0 D6 C4 9F C7 E8 0A 8F 87 F6 B4 79 03 F8 BD C4 12 3E 1E 47 8D 23 AF CB 65 2A A4 9F 1F 0D F4 CA 08 1C BC F9 04 83 B6 DA 6D B7 3C FD DF 84 31 F4 F4 DF 42 C5 46 CD B7 8D 81 D2 B0 1B F3 D8 79 24 79 F1 E3 DD AE 47 86 C7 6D B6 50 76 F7 7C F5 C0 31 3C B7 F7 92 3C 78 F9 7F D8 C7 DE 3F 61 FF C4 00 14 11 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 70 FF DA 00 08 01 02 01 01 3F 00 64 FF C4 00 17 11 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 11 00 50 70 FF DA 00 08 01 03 01 01 3F 00 E7 24 44 64 7F FF D9",
      "49 27 6d 20 69 6e 20 74 68 65 20 72 6f 6f 6d 20 77 69 74 68 20 79 6f 75 2e",   // Hex
      "546865206D6174726978206973206D7920647265616D20667574757265",                   // ASCII
      "U2Vjb25kYXJ5IExvY2F0aW9uIFN5bmNocm9uaXNhdGlvbi4gVGltZSBTeW5jLg==",             // Base64
      "U2Vjb25kYXJ5IExvY2F0aW9uIFN5bmNocm9uaXNhdGlvbi4gVXBkYXRlIEJpb2xvZ2ljYWwgSURz", // Base64
      "U2Vjb25kYXJ5IExvY2F0aW9uIFN5bmNocm9uaXNhdGlvbi4gVGFyZ2V0IEluZmVyaW9ycw==",     // Base64
      "Jr'er ab fgenatref gb ybir Lbh xabj gur ehyrf naq fb qb V (qb V)",             // ROT13
      "73 32 104 97 118 101 32 100 105 115 99 111 118 101 114 101 100 32 52 67 104 97 110 46 32 72 117 109 97 110 115 32 97 114 101 32 100 101 112 114 97 118 101 100 46", //ASCII
      "You'll never find me... I'm hidden in plain sight"};

  // Generate random number to indicate index. So each message posted is randomised.
  int messageIndex = random(sizeof(messages) / sizeof(messages[0]));

  // Post the message to the server.
  dataTransfer(apiPassword, userName, moduleName, messages[messageIndex]);
}

void gpsInitialise()
{
  GPS.begin(9600);
  // uncomment this line to turn on RMC (recommended minimum) and GGA (fix data) including altitude
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  // uncomment this line to turn on only the "minimum recommended" data
  // GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCONLY);
  // For parsing data, we don't suggest using anything but either RMC only or RMC+GGA since
  // the parser doesn't care about other sentences at this time
  // Set the update rate
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); // 1 Hz update rate
  // For the parsing code to work nicely and have time to sort thru the data, and
  // print it out we don't suggest using anything higher than 1 Hz

  // Request updates on antenna status, comment out to keep quiet
  GPS.sendCommand(PGCMD_ANTENNA);

  delay(1000);

  // Ask for firmware version
  GPSSerial.println(PMTK_Q_RELEASE);
}

void gpsRead()
{
  // read data from the GPS in the 'main loop'
  char c = GPS.read();
  // if you want to debug, this is a good time to do it!
  if (GPSECHO)
    if (c)
      Serial.print(c);
  // if a sentence is received, we can check the checksum, parse it...
  if (GPS.newNMEAreceived())
  {
    // a tricky thing here is if we print the NMEA sentence, or data
    // we end up not listening and catching other sentences!
    // so be very wary if using OUTPUT_ALLDATA and trying to print out data
    Serial.print(GPS.lastNMEA());   // this also sets the newNMEAreceived() flag to false
    if (!GPS.parse(GPS.lastNMEA())) // this also sets the newNMEAreceived() flag to false
      return;                       // we can fail to parse a sentence in which case we should just wait for another
  }

  // approximately every 2 seconds or so, print out the current stats
  if (millis() - timer > 2000)
  {
    timer = millis(); // reset the timer
    Serial.print("\nTime: ");
    if (GPS.hour < 10)
    {
      Serial.print('0');
    }
    Serial.print(GPS.hour, DEC);
    Serial.print(':');
    if (GPS.minute < 10)
    {
      Serial.print('0');
    }
    Serial.print(GPS.minute, DEC);
    Serial.print(':');
    if (GPS.seconds < 10)
    {
      Serial.print('0');
    }
    Serial.print(GPS.seconds, DEC);
    Serial.print('.');
    if (GPS.milliseconds < 10)
    {
      Serial.print("00");
    }
    else if (GPS.milliseconds > 9 && GPS.milliseconds < 100)
    {
      Serial.print("0");
    }
    Serial.println(GPS.milliseconds);
    Serial.print("Date: ");
    Serial.print(GPS.day, DEC);
    Serial.print('/');
    Serial.print(GPS.month, DEC);
    Serial.print("/20");
    Serial.println(GPS.year, DEC);
    Serial.print("Fix: ");
    Serial.print((int)GPS.fix);
    Serial.print(" quality: ");
    Serial.println((int)GPS.fixquality);
    if (GPS.fix)
    {
      Serial.print("Location: ");
      Serial.print(GPS.latitude, 4);
      Serial.print(GPS.lat);
      Serial.print(", ");
      Serial.print(GPS.longitude, 4);
      Serial.println(GPS.lon);
      String loc = String(GPS.latitude) + ", " + String(GPS.longitude);
      dataTransfer(apiPassword, userName, moduleName, "loc");
    }
          

  }
}

void OLEDUpdate(String messageToBroadcast, String ip)
{
  // text display tests
  OLEDdisplay.setTextSize(1);
  OLEDdisplay.setTextColor(SSD1306_WHITE);
  OLEDdisplay.setCursor(0,0);
  OLEDdisplay.print("Connected to SSID\n'CyberRange':");
  OLEDdisplay.println(ip);
  OLEDdisplay.println(messageToBroadcast);
  OLEDdisplay.setCursor(0,0);
  OLEDdisplay.display(); // actually display all of the above
  }

void setup()
{
  // put your setup code here, to run once:
  pinMode(13, OUTPUT);
  Serial.begin(9600);
  while (!Serial)
  {
    delay(10);
  }
  delay(1000);
#if WIRED == 0
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED)
  {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }
  Serial.println();
  Serial.print("Connected to the Internet");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
#else
  Ethernet.init(33); // Most Arduino shields
  if (Ethernet.begin(mac) == 0)
  {
    Serial.println("Failed to configure Ethernet using DHCP");
    // Check for Ethernet hardware present
    if (Ethernet.hardwareStatus() == EthernetNoHardware)
    {
      Serial.println("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
      while (true)
      {
        delay(1); // do nothing, no point running without Ethernet hardware
      }
    }
    if (Ethernet.linkStatus() == LinkOFF)
    {
      Serial.println("Ethernet cable is not connected.");
    }
    // try to configure using IP address instead of DHCP:
    Ethernet.begin(mac, ip, myDns);
  }
  else
  {
    Serial.print("  DHCP assigned IP ");
    Serial.println(Ethernet.localIP());
  }
#endif

#if WIRED == 0
  String ipAddress = WiFi.localIP().toString();
#else
  String ipAddress = Ethernet.localIP().toString();
#endif
  logEvent("Monitoring Initialised. Avoid squishy biologicals at all costs.");
  String ip = "IP: " + ipAddress;
  logEvent(ip);
  // Seed needs to be randomised based on ADC#1 noise. ADC#2 can't be used as this is used by Wifi.
  // GPIO pin 36 is AKA pin A4.
  randomSeed(analogRead(36)); // randomize using noise from analog pin 5

  // GPS
  gpsInitialise();

  //OLED
  OLEDdisplay.begin(SSD1306_SWITCHCAPVCC, 0x3C); // Address 0x3C for 128x32

  Serial.println("OLED begun");

  // Show image buffer on the display hardware.
  // Since the buffer is intialized with an Adafruit splashscreen
  // internally, this will display the splashscreen.
  OLEDdisplay.display();
  delay(1000);

  // Clear the buffer.
  OLEDdisplay.clearDisplay();
  OLEDdisplay.display();

  Serial.println("IO test");

  pinMode(BUTTON_A, INPUT_PULLUP);
  pinMode(BUTTON_B, INPUT_PULLUP);
  pinMode(BUTTON_C, INPUT_PULLUP);

  OLEDUpdate("CTF{FoundMe}", ip);

  // EPD
  /*
  display.begin();
  display.clearBuffer();
  */
  //EPDUpdate("Welcome", ip);
}

void loop()
{

  // Start : Broadcast a message
  // 'randomly' broadcast a messages.
  // Unlike using a delay,() this does not stop the rest of the loop from executing.
  long interval = random(MIN_DELAY, MAX_DELAY);
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval)
  {
    // Serial.println(interval);
    previousMillis = currentMillis;
    broadcastMessage();
  }
  // End : Broadcast a message

  // GPS
  //gpsRead();
  delay(250);
}
